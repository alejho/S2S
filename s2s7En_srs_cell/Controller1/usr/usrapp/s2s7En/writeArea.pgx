<?xml version="1.0" encoding="utf-8"?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2">
  <Program name="writeArea" access="public">
    <Parameters xmlns="http://www.staubli.com/robotics/VAL3/Param/1">
      <Parameter name="x_nIdArea" type="num" xsi:type="element" />
      <Parameter name="x_nDBnumber" type="num" xsi:type="element" />
      <Parameter name="x_nBuffer" type="num" xsi:type="array" use="reference" />
      <Parameter name="x_nStartAt" type="num" xsi:type="element" />
      <Parameter name="x_nQty" type="num" xsi:type="element" />
    </Parameters>
    <Locals>
      <Local name="l_Address" type="num" xsi:type="array" size="1" />
      <Local name="l_bLoop" type="bool" xsi:type="array" size="1" />
      <Local name="l_nDataSize" type="num" xsi:type="array" size="1" />
      <Local name="l_nElementsNum" type="num" xsi:type="array" size="1" />
      <Local name="l_nIndex" type="num" xsi:type="array" size="1" />
      <Local name="l_nIsoSize" type="num" xsi:type="array" size="1" />
      <Local name="l_nLength" type="num" xsi:type="array" size="1" />
      <Local name="l_nMaxElements" type="num" xsi:type="array" size="1" />
      <Local name="l_nOffs" type="num" xsi:type="array" size="1" />
      <Local name="l_nS7W" type="num" xsi:type="array" size="35" />
      <Local name="l_nTempDec" type="num" xsi:type="array" size="1" />
      <Local name="l_nTotElements" type="num" xsi:type="array" size="1" />
      <Local name="l_nWordSize" type="num" xsi:type="array" size="1" />
      <Local name="l_sRes" type="string" xsi:type="array" size="1" />
      <Local name="l_sTempBin" type="string" xsi:type="array" size="1" />
    </Locals>
    <Code><![CDATA[begin
  
  //Header begin
  
  // This function write in a given PLC memory's area the content of the passed array of num, starting from a gven byte and for a given amount of bytes.
  //
  //Input parameters
  //
  //num x_nIdArea: the PLC's memory area identifier (you'll find several identifier as public members of the library with the suffix "nArea").
	//num x_nDBnumber: the DB number you're writing to (this parameter is not important if you're not writing a db...but in VAL3 there's no possibility to overload functions so we must pass it the same to this function!).
	//num x_nBuffer[1]:  a monodimensional array where representing the memory area we want to write. If the size of this buffer is smaller than "x_nQty" only "size(x_nBuffer[])" will be written .
	//num x_nStartAt: the byte address you want start to write from.
	//num x_nQty: the amount of bytes you want to write.
  //
  //Examples
  //
  //call S7:writeArea(S7:nAreaDB, nDBnumber, nSampleBuffer, 0, size(nSampleBuffer)) 
  //
  //History
  //
  // Creation: 24-12-16 - Alessio Villa
  //Header end

  l_nOffs=0
  l_nWordSize=1

  call setLastError(nNoErrors)

  if x_nIdArea==nAreaCT or x_nIdArea==nAreaTM
    l_nWordSize=2
  endIf

  l_nMaxElements=(nPDULength-size(nS7_W))/l_nWordSize
  l_nTotElements=x_nQty

  while l_nTotElements>0 and nLastError==nNoErrors

    l_nElementsNum=l_nTotElements
    if l_nElementsNum>l_nMaxElements
      l_nElementsNum=l_nMaxElements
    endIf

    l_nDataSize=l_nElementsNum*l_nWordSize
    l_nIsoSize=size(nS7_W)+l_nDataSize

    //setup the telegram
    getData("nS7_W",l_nS7W)

    //telegram size high byte
    l_sTempBin=""
    call bitOp:DecToBin(l_nIsoSize,l_sTempBin)
    call bitOp:shiftRight(l_sTempBin,8)
    l_nTempDec=0
    call bitOp:BinToDec(l_sTempBin,l_nTempDec)
    l_nS7W[2]=l_nTempDec

    //telegram size low byte
    l_sTempBin=""
    call bitOp:DecToBin(l_nIsoSize,l_sTempBin)
    l_sRes=""
    call bitOp:boolAnd(l_sTempBin,"0000000011111111",l_sRes)
    l_nTempDec=0
    call bitOp:BinToDec(l_sTempBin,l_nTempDec)
    l_nS7W[3]=l_nTempDec

    //data length high byte
    l_nLength=l_nDataSize+4
    l_sTempBin=""
    call bitOp:DecToBin(l_nLength,l_sTempBin)
    call bitOp:shiftRight(l_sTempBin,8)
    l_nTempDec=0
    call bitOp:BinToDec(l_sTempBin,l_nTempDec)
    l_nS7W[15]=l_nTempDec

    //data length low bytes
    l_sTempBin=""
    call bitOp:DecToBin(l_nLength,l_sTempBin)
    l_sRes=""
    call bitOp:boolAnd(l_sTempBin,"0000000011111111",l_sRes)
    l_nTempDec=0
    call bitOp:BinToDec(l_sTempBin,l_nTempDec)
    l_nS7W[16]=l_nTempDec

    //function id
    l_nS7W[17]=5
    //plc memory area
    l_nS7W[27]=x_nIdArea
    if x_nIdArea==nAreaDB
      //db number high byte
      l_sTempBin=""
      call bitOp:DecToBin(x_nDBnumber,l_sTempBin)
      call bitOp:shiftRight(l_sTempBin,8)
      l_nTempDec=0
      call bitOp:BinToDec(l_sTempBin,l_nTempDec)
      l_nS7W[25]=l_nTempDec
      //db number low byte
      l_sTempBin=""
      call bitOp:DecToBin(x_nDBnumber,l_sTempBin)
      l_sRes=""
      call bitOp:boolAnd(l_sTempBin,"0000000011111111",l_sRes)
      l_nTempDec=0
      call bitOp:BinToDec(l_sTempBin,l_nTempDec)
      l_nS7W[26]=l_nTempDec
    endIf
    // Adjusts Start and word length
    if x_nIdArea==nAreaCT or x_nIdArea==nAreaTM
      l_Address=x_nStartAt
      l_nLength=l_nDataSize
      if x_nIdArea==nAreaCT
        l_nS7W[22]=nS7WLCounter
      else
        l_nS7W[22]=nS7WLTimer
      endIf
    else
      //shift left 3 bit
      l_Address=x_nStartAt*power(2,3)
      //shift left 3 bit
      l_nLength=l_nDataSize*power(2,3)
    endIf

    l_nS7W[23]=l_nElementsNum*power(2,8)
    l_nS7W[24]=l_nElementsNum
    //address in plc
    l_sTempBin=""
    call bitOp:DecToBin(l_Address,l_sTempBin)
    l_sRes=""
    call bitOp:boolAnd(l_sTempBin,"0000000011111111",l_sRes)
    l_nTempDec=0
    call bitOp:BinToDec(l_sRes,l_nTempDec)
    l_nS7W[30]=l_nTempDec
    call bitOp:shiftRight(l_sTempBin,8)

    l_sRes=""
    call bitOp:boolAnd(l_sTempBin,"0000000011111111",l_sRes)
    l_nTempDec=0
    call bitOp:BinToDec(l_sRes,l_nTempDec)
    l_nS7W[29]=l_nTempDec
    call bitOp:shiftRight(l_sTempBin,8)

    l_sRes=""
    call bitOp:boolAnd(l_sTempBin,"0000000011111111",l_sRes)
    l_nTempDec=0
    call bitOp:BinToDec(l_sRes,l_nTempDec)
    l_nS7W[28]=l_nTempDec

    //length high byte
    l_sTempBin=""
    call bitOp:DecToBin(l_nLength,l_sTempBin)
    call bitOp:shiftRight(l_sTempBin,8)
    l_nTempDec=0
    call bitOp:BinToDec(l_sTempBin,l_nTempDec)
    l_nS7W[33]=l_nTempDec
    //legth low byte
    l_sTempBin=""
    call bitOp:DecToBin(l_nLength,l_sTempBin)
    l_sRes=""
    call bitOp:boolAnd(l_sTempBin,"0000000011111111",l_sRes)
    l_nTempDec=0
    call bitOp:BinToDec(l_sTempBin,l_nTempDec)
    l_nS7W[34]=l_nTempDec
    //copy data to be sent in the telegram from where i finished in the previous iteration
    l_bLoop=true
    l_nIndex=0
    while l_bLoop
      PDU.S7telegram.DATA[l_nIndex]=x_nBuffer[l_nOffs+l_nIndex]
      l_nIndex=l_nIndex+1
      if l_nIndex>=size(PDU.S7telegram.DATA) or (l_nIndex+l_nOffs)>=size(x_nBuffer)
        l_bLoop=false
      endIf
    endWhile
    //send header
    call sendPacket(l_nS7W,size(nS7_W))
    //send data
    call sendPacket(PDU.S7telegram.DATA,l_nIsoSize-size(nS7_W))
    if nLastError==nNoErrors
      call recvISOpacket(l_nLength)
      if nLastError==nNoErrors
        //15 is expected here!
        if l_nLength==15
          if PDU.S7telegram.H[10]!=0 or PDU.S7telegram.H[11]!=0 or PDU.S7telegram.H[14]!=255
            call setLastError(nErrDataWrite)
          endIf
        else
          call setLastError(nErrISOInvPDU)
        endIf
      endIf
    else
      //error while sending packet
      call setLastError(nErrTCPSend)
    endIf

    l_nOffs=l_nOffs+l_nDataSize
    l_nTotElements=l_nTotElements-l_nElementsNum
    x_nStartAt=x_nStartAt+l_nElementsNum*l_nWordSize

  endWhile
end]]></Code>
  </Program>
</Programs>