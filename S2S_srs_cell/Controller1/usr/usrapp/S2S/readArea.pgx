<?xml version="1.0" encoding="utf-8"?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2">
  <Program name="readArea" access="public">
    <Parameters xmlns="http://www.staubli.com/robotics/VAL3/Param/1">
      <Parameter name="x_nIdArea" type="num" xsi:type="element" />
      <Parameter name="x_nDBnumber" type="num" xsi:type="element" />
      <Parameter name="x_nStartAt" type="num" xsi:type="element" />
      <Parameter name="x_nQty" type="num" xsi:type="element" />
      <Parameter name="x_nBuffer" type="num" xsi:type="array" use="reference" />
    </Parameters>
    <Locals>
      <Local name="l_Address" type="num" xsi:type="array" size="1" />
      <Local name="l_nElementsNum" type="num" xsi:type="array" size="1" />
      <Local name="l_nMaxElements" type="num" xsi:type="array" size="1" />
      <Local name="l_nTotElements" type="num" xsi:type="array" size="1" />
      <Local name="l_nSizeReq" type="num" xsi:type="array" size="1" />
      <Local name="l_nLength" type="num" xsi:type="array" size="1" />
      <Local name="l_nOffs" type="num" xsi:type="array" size="1" />
      <Local name="l_nWordSize" type="num" xsi:type="array" size="1" />
      <Local name="l_sTempBin" type="string" xsi:type="array" size="1" />
      <Local name="l_nTempDec" type="num" xsi:type="array" size="1" />
      <Local name="l_sRes" type="string" xsi:type="array" size="1" />
      <Local name="l_nIndex" type="num" xsi:type="array" size="1" />
      <Local name="l_nS7R" type="num" xsi:type="array" size="31" />
      <Local name="l_nToIndex" type="num" xsi:type="array" size="1" />
    </Locals>
    <Code><![CDATA[begin
  
  l_nOffs = 0
  l_nWordSize = 1
  
  call setLastError(nNoErrors)
  
  if size(x_nBuffer)<x_nQty
    //small buffer
    x_nQty=size(x_nBuffer)
  endIf
  
  if x_nIdArea==nAreaCT or x_nIdArea==nAreaTM
    l_nWordSize=2
  endIf
  
  //18 is the reply header size
  l_nMaxElements=(nPDULength-18)/l_nWordSize
  l_nTotElements = x_nQty
  
  while l_nTotElements>0 and nLastError==nNoErrors
    
    l_nElementsNum = l_nTotElements
    if l_nElementsNum>l_nMaxElements
      l_nElementsNum=l_nMaxElements
    endIf
    //calc request size
    l_nSizeReq=l_nElementsNum*l_nWordSize
    
    //setup the telegram!
    getData("nS7_R", l_nS7R)
    
    //set area number
    l_nS7R[27]=x_nIdArea
    if x_nIdArea==nAreaDB
      //set db number
      l_sTempBin=""
      call bitOp:DecToBin(x_nDBnumber, l_sTempBin)
      call bitOp:shiftRight(l_sTempBin, 8)
      l_nTempDec=0
      call bitOp:BinToDec(l_sTempBin, l_nTempDec)
      l_nS7R[25]=l_nTempDec 
      l_sTempBin=""
      call bitOp:DecToBin(x_nDBnumber, l_sTempBin)
      l_sRes=""
      call bitOp:boolAnd(l_sTempBin, "0000000011111111", l_sRes)
      l_nTempDec=0
      call bitOp:BinToDec(l_sRes, l_nTempDec)
      l_nS7R[26]=l_nTempDec
    endIf
    
    // Adjusts Start and word length
    if x_nIdArea==nAreaCT or x_nIdArea==nAreaTM
      l_Address=x_nStartAt
      if x_nIdArea==nAreaCT
        l_nS7R[22]=nWLcounter
      else
        l_nS7R[22]=nWLtimer
      endIf
    else
      //shift left 3 bit
      l_Address=x_nStartAt*power(2,3)
    endIf
    
    //number of elements
    l_nS7R[23]=l_nElementsNum*power(2,8)
    l_nS7R[24]=l_nElementsNum
    //address in plc
    l_sTempBin=""
    call bitOp:DecToBin(l_Address, l_sTempBin)
    l_sRes=""
    call bitOp:boolAnd(l_sTempBin, "0000000011111111", l_sRes)
    l_nTempDec=0
    call bitOp:BinToDec(l_sRes, l_nTempDec)
    l_nS7R[30]=l_nTempDec
    call bitOp:shiftRight(l_sTempBin, 8)
    
    l_sRes=""
    call bitOp:boolAnd(l_sTempBin, "0000000011111111", l_sRes)
    l_nTempDec=0
    call bitOp:BinToDec(l_sRes, l_nTempDec)
    l_nS7R[29]=l_nTempDec
    call bitOp:shiftRight(l_sTempBin, 8)
    
    l_sRes=""
    call bitOp:boolAnd(l_sTempBin, "0000000011111111", l_sRes)
    l_nTempDec=0
    call bitOp:BinToDec(l_sRes, l_nTempDec)
    l_nS7R[28]=l_nTempDec  
    
    //send the telegram!
    call sendPacket(l_nS7R, nRDsize)
    if nLastError==nNoErrors
      call recvISOpacket(l_nLength)
      if nLastError==nNoErrors
        if l_nLength>=18
          //if ((Length-18==SizeRequested) && (PDU.H[31]==0xFF))
          if l_nLength-18==l_nSizeReq and PDU.S7telegram.H[14]==255
            //copy data in the target buffer
            l_nIndex=0
            if size(x_nBuffer)-l_nOffs<size(PDU.S7telegram.DATA)
              l_nToIndex=size(x_nBuffer)-l_nOffs-1
            else
              l_nToIndex=size(PDU.S7telegram.DATA)-1
            endIf
            for l_nIndex=0 to l_nToIndex
              x_nBuffer[l_nOffs+l_nIndex]=PDU.S7telegram.DATA[l_nIndex]
            endFor
            l_nOffs=l_nOffs+l_nSizeReq
          else
            call setLastError(nErrDataRead)
          endIf
        else
          call setLastError(nErrISOInvPDU)
        endIf
      else
        //error detected
      endIf
    else
      call setLastError(nErrTCPSend)
    endIf
    
    l_nTotElements=l_nTotElements-l_nElementsNum
    x_nStartAt=x_nStartAt+l_nElementsNum*l_nWordSize
    
  endWhile
  
end]]></Code>
  </Program>
</Programs>